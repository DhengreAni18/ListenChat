{"version":3,"sources":["modules/interface.js","App.js","serviceWorker.js","index.js"],"names":["Parent","props","downloadFile","a","chatjson","state","fileName","json","JSON","stringify","blob","Blob","type","URL","createObjectURL","href","link","document","createElement","download","body","appendChild","click","removeChild","greet","bind","greetcust","finalChat","jsonChatBot","jsonChatUser","text","txtcust","finalchat","value","console","log","this","setState","concat","Bot","timestamp","Date","User","className","map","xx","key","textAsButton","displayText","voice","onGreet","Onfinal","x","onGreetCust","onClick","React","Component","handleChange","eventClick","event","target","placeholder","id","onChange","htmlFor","Cust","valuecust","handleChangeCust","eventClickCust","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.73f35515.chunk.js","sourcesContent":["import React from \"react\";\nimport Speech from \"react-speech\";\n\nexport class Parent extends React.Component {\n  constructor(props) {\n    super();\n    this.greet = this.greet.bind(this);\n    this.greetcust = this.greetcust.bind(this);\n    this.finalChat = this.finalChat.bind(this);\n    this.jsonChatBot = this.jsonChatBot.bind(this);\n    this.jsonChatUser = this.jsonChatUser.bind(this);\n    this.state = {\n      text: [],\n      txtcust: [],\n      finalchat: [],\n      chatjson: [],\n    };\n  }\n\n  greet(value) {\n    console.log(this.state.text);\n\n    return this.setState({\n      text: this.state.text.concat(value),\n    });\n  }\n\n  greetcust(value) {\n    console.log(this.state.txtcust);\n\n    return this.setState({\n      txtcust: this.state.txtcust.concat(value),\n    });\n  }\n\n  finalChat(value) {\n    console.log(this.state.finalchat);\n\n    return this.setState({\n      finalchat: this.state.finalchat.concat(value),\n    });\n  }\n\n  jsonChatBot(value) {\n    console.log(this.state.chatjson);\n\n    return this.setState({\n      chatjson: this.state.chatjson.concat({\n        Bot: value,\n        timestamp: new Date(),\n      }),\n    });\n  }\n\n  jsonChatUser(value) {\n    console.log(this.state.chatjson);\n\n    return this.setState({\n      chatjson: this.state.chatjson.concat({\n        User: value,\n        timestamp:new Date(),\n      }),\n    });\n  }\n\n  downloadFile = async () => {\n    const { chatjson } = this.state;\n    const fileName = \"Chat_JSON\";\n    const json = JSON.stringify(chatjson);\n    const blob = new Blob([json], { type: \"application/json\" });\n    const href = await URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = href;\n    link.download = fileName + \".json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  render() {\n    return (\n      <div>\n        <article className=\"card\">\n          <div className=\"grid2x2\">\n            <div className=\"box box1\">\n              <ul>\n                {this.state.text.map((xx) => (\n                  <li key={xx}>\n                    {xx}{\" \"}\n                    <Speech\n                      text={xx}\n                      textAsButton\n                      displayText=\"Play\"\n                      voice=\"Google UK English Male\"\n                    />{\" \"}\n                  </li>\n                ))}\n              </ul>\n              <Bot\n                onGreet={this.greet}\n                Onfinal={this.finalChat}\n                json={this.jsonChatBot}\n              />\n            </div>\n            <div className=\"box box2\">\n              <ul>\n                {this.state.txtcust.map((x) => (\n                  <li key={x}>\n                    {x}{\" \"}\n                    <Speech\n                      text={x}\n                      textAsButton\n                      displayText=\"Play\"\n                      voice=\"Google UK English Male\"\n                    />{\" \"}\n                  </li>\n                ))}\n              </ul>\n              <Cust\n                onGreetCust={this.greetcust}\n                Onfinal={this.finalChat}\n                json={this.jsonChatUser}\n              />\n            </div>\n          </div>\n          \n        </article>\n        <button className=\"playall\">\n            <Speech\n              text={this.state.finalchat + \"\"}\n              textAsButton\n              displayText=\"PLAY FINAL CHAT\"\n              voice=\"Google UK English Male\"\n            />\n          </button>\n\n          <button onClick={this.downloadFile} className=\"btn download\">\n            download json\n          </button>\n      </div>\n    );\n  }\n}\n\nexport class Bot extends React.Component {\n  constructor(props) {\n    super();\n    this.state = { value: \"\" };\n    this.handleChange = this.handleChange.bind(this);\n    this.eventClick = this.eventClick.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  eventClick() {\n    this.props.onGreet(this.state.value);\n    this.props.Onfinal(this.state.value);\n    this.props.json(this.state.value);\n    this.setState({\n      value: \"\",\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"form__group field\">\n          <input\n            type=\"text\"\n            className=\"form__field\"\n            placeholder=\"Name\"\n            id=\"ipbot\"\n            value={this.state.value}\n            onChange={this.handleChange}\n          />\n\n          <label htmlFor=\"name\" className=\"form__label\">\n            Bot\n          </label>\n          <button\n            type=\"button\"\n            className=\"btn submit\"\n            onClick={this.eventClick}\n          >\n            Send{\" \"}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport class Cust extends React.Component {\n  constructor(props) {\n    super();\n    this.state = { valuecust: \"\" };\n    this.handleChangeCust = this.handleChangeCust.bind(this);\n    this.eventClickCust = this.eventClickCust.bind(this);\n  }\n\n  handleChangeCust(event) {\n    this.setState({ valuecust: event.target.value });\n  }\n\n  eventClickCust() {\n    this.props.onGreetCust(this.state.valuecust);\n    this.props.Onfinal(this.state.valuecust);\n    this.props.json(this.state.valuecust);\n\n    this.setState({\n      valuecust: \"\",\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"form__group field\">\n          <input\n            type=\"text\"\n            className=\"form__field\"\n            placeholder=\"Name\"\n            id=\"ipcust\"\n            value={this.state.valuecust}\n            onChange={this.handleChangeCust}\n          />\n\n          <label htmlFor=\"name\" className=\"form__label\">\n            User\n          </label>\n\n          <button\n            type=\"button\"\n            className=\"btn submit\"\n            onClick={this.eventClickCust}\n          >\n            Send{\" \"}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Parent;\n","import React from \"react\";\nimport \"./App.css\";\nimport Parent from \"./modules/interface\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <header className=\"App-header\">\n        <Parent />\n      </header>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}